Category (e.g.: Electronics, Clothing, Kitchen)
-Name
-Total?
Item (e.g.: TV, Shirts, Pots and Pans)
-Name
-Value
-IsDeleted

Category has many Items


'rimraf' is not recognized as an internal or external command, operable program or batch file.
-npm install rimraf, in a new cmd window running as admin. For some reason `npm install rimraf` in the terminal in VSCode didn't resolve this.

'react-scripts' is not recognized as an internal or external command, operable program or batch file.
-run the `dotnet new react -o insurance-calc` command in a new cmd window running as admin. For some reason running the command in the terminal in VSCode works differently. At the time VSCode was not running as Admin, but didn't try that.

The type or namespace name 'DbContext' could not be found
-need to install Microsoft.EntityFrameworkCore
-in my case I had installed the Nuget Package Manager extension
-using the command palette nuget > EntityFrameworkCore, found latest stable version was 3.1.3 and selected it
-needed to restore once added

DbContextOptionsBuilder does not contain a definition for 'UseSqlServer'
-UseSqlServer is in Microsoft.EntityFrameworkCore.SqlServer, need to install that package
-in terminal dotnet add package Microsoft.EntityFrameworkCore.SqlServer
-build, references should now be resolved

We have a React app with ASP.NET Core and MVC and a localdb that gets initialized when we build
Now we need to start thinking in React Components

My first thought is to have a Grid component that shows Categories and their child Items
In React we could do this but we would have to ask each item for their value to calculate the total
Is it better React design for the Grid to know what items are in it, and then tell each row what to display?

TypeError: Cannot read property 'map' of undefined
-uhh, map is a method, not a property
-it's a bug!  Edge case where we have empty data which already happens when we initialize the react component
-when empty, the categories in categories.items.map is empty set, so there's no map and no items
-also this won't render because categories doesn't have items, categories.First() or categories[0] will render that category's items
-we should be able to nest maps https://stackoverflow.com/questions/47402365/how-to-have-nested-loops-with-map-in-jsx

Can't get Categories and Items to render with map without violating some HTML guidelines (can't nest <tr> in <tr>)
-try making a table with each category as a table
-check if we are permitted to nest tables in tables
-name and total as headers
-each item in a <tr>
-I left this for now as something to polish. For now this causes warnings in the DomValidator which show as errors in F12.

TypeError: this.handleDelete is not a function 
-It's not enough to have the function defined with the correct name and all that
-Even the order of apperance doesn't matter
-tried to bind the function in the component constructor() method with this.handleDelete = this.handleDelete.bind(this);
-tried adding () => this.handleDelete()
<td><a className="action" onClick={() => this.handleDelete(item.id)}><FontAwesomeIcon icon ={faTrashAlt} /></a></td>
-still not yet solved, this a blocker for delete and add functions
-I'm fairly convinced that the 'this' we get is no longer the InsuranceCalc component, even though breakpointing and looking yields the InsuranceCalc constructor function.
-Got around it: Instead of using 'this', just move the handleDelete() method inside the renderInsuranceCalcTable method and refer to it locally as handleDelete() (sans the 'this').
-I figured out what 'this' was. I'm seeing the InsuranceCalc constructor in 'this' because that's what it is. However, renderInsuranceCalcTable was static, meaning 'this' was not an instance of the InsuranceCalc component. You can't instantiate a static class.  Removing 'static' allowed the use of 'this' just fine, and now everything is working as expected.
-this helped me understand 'this': yehidakatz.com/2011/08/11/understand-javascript-function-invocation-and-this/

handleDelete method doesn't work, 404 not found
-I had to make sure the handleDelete() method was using the same URL as the action handler.  In the action handler's Route attribute there was an 'api/' at the beginning that didn't belong there.
-Once the React component was calling the action successfully, I had to make sure that the fetch().then method was getting a function.  I needed to add '() =>{this.PopulateInsuranceCalcData}'.

Message [string]:"Database 'JSU-INSURANCE-CALC-LOCALDB' already exists. Choose a different database name."
-something went wrong with the db.  Deleting it and attempting to recreate it gave "already exists" or "can't log in" errors.
-reboot?
-undo the delete and it started working again... 

Polish Items
-some polish: I want to make the delete buttons something with an href attribute
./src/components/InsuranceCalc.js
  Line 49:33:  The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md  jsx-a11y/anchor-is-valid
-do something with the bool that the Delete action returns, that is if we can see it somewhere.
-make AddItem a separate component from the InsuranceCalc grid
